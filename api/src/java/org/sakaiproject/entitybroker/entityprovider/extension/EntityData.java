/**
 * $Id$
 * $URL$
 * EntityData.java - entity-broker - Aug 3, 2008 6:03:53 PM - azeckoski
 **************************************************************************
 * Copyright (c) 2008 Aaron Zeckoski
 * Licensed under the Apache License, Version 2.0
 * 
 * A copy of the Apache License has been included in this 
 * distribution and is available at: http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 * Aaron Zeckoski (azeckoski @ gmail.com) (aaronz @ vt.edu) (aaron @ caret.cam.ac.uk)
 */

package org.sakaiproject.entitybroker.entityprovider.extension;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

import org.sakaiproject.entitybroker.EntityReference;
import org.sakaiproject.entitybroker.EntityView;
import org.sakaiproject.entitybroker.entityprovider.capabilities.Resolvable;


/**
 * This is an object to hold data from a search which would normally return entity references,
 * This is basically a POJO which allows us to return a few results instead of only the reference,
 * it helps us get the data back more efficiently and makes it easier on developers who
 * need to search for entities
 * 
 * @author Aaron Zeckoski (azeckoski @ gmail.com)
 */
public class EntityData {

   /**
    * The entity reference -  a globally unique reference to an entity, 
    * consists of the entity prefix and optional segments (normally the id at least),
    * this should be set by the constructor only
    */
   private String reference;
   /**
    * The entity reference -  a globally unique reference to an entity, 
    * consists of the entity prefix and optional segments (normally the id at least)
    */
   public String getReference() {
      return reference;
   }

   /**
    * The entity reference object which makes it easy to get to the prefix or id of this entity,
    * this should be set by the constructor only
    */
   private EntityReference entityReference;
   /**
    * The entity reference object which makes it easy to get to the prefix or id of this entity is needed
    */
   public EntityReference getEntityReference() {
      return entityReference;
   }

   /**
    * A string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    */
   private String displayTitle;
   /**
    * A string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    */
   public void setDisplayTitle(String displayTitle) {
      this.displayTitle = displayTitle;
   }
   /**
    * A string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    */
   public String getDisplayTitle() {
      if (this.displayTitle == null) {
         return this.entityReference.getPrefix() + " : " + reference;
      }
      return displayTitle;
   }
   /**
    * @return true if the display title is actually set, false if it is null and will return an autogenerated value
    */
   public boolean isDisplayTitleSet() {
      return displayTitle != null;
   }

   /**
    * (OPTIONAL - may be null)
    * The URL to the entity represented by this reference,
    * should be an absolute URL (server name optional),
    * if this is null then the URL is formed from the reference
    */
   private String URL;
   /**
    * WARNING: for internal use only
    * @param url the url to access this entity
    */
   public void setEntityURL(String url) {
      URL = url;
   }
   /**
    * The URL to the entity represented by this reference,
    * should be an absolute URL (server name optional)
    */
   public String getEntityURL() {
      return URL;
   }

   /**
    * (OPTIONAL - may be null)
    * A set of properties to return along with the entity information,
    * this may be presented and used for filtering,
    * this will be null or empty if it is not used
    */
   private Map<String, Object> entityProperties;
   /**
    * (OPTIONAL - may be null)
    * A set of properties to return along with the entity information,
    * this may be presented and used for filtering,
    * should be null or empty if not used
    * @param entityProperties a map of property name => value
    */
   public void setEntityProperties(Map<String, Object> entityProperties) {
      this.entityProperties = entityProperties;
   }
   /**
    * A set of properties to return along with the entity information,
    * this may be presented and used for filtering,
    * this will be empty if it is not used
    */
   public Map<String, Object> getEntityProperties() {
      if (entityProperties == null) {
         entityProperties = new HashMap<String, Object>(0);
      }
      return entityProperties;
   }

   /**
    * (OPTIONAL - may be null)
    * This is the entity object itself (if there is one),
    * this is included at the discretion of the entity provider author,
    * if this is null then the entity data is not available or would be prohibitively large (i.e. typically left out for efficiency)
    */
   private transient Object entity;
   public void setEntity(Object entity) {
      this.entity = entity;
//      if (entity != null) {
//         this.entity = new WeakReference<Object>(entity);
//      } else {
//         this.entity = null;
//      }
   }
   /**
    * (OPTIONAL - may be null)
    * This is the entity object itself (if there is one),
    * this is included at the discretion of the entity provider author,
    * if this is null then the entity data is not available or would be prohibitively large (i.e. typically left out for efficiency)
    */
   public Object getEntity() {
      return this.entity;
//      if (this.entity == null) {
//         return null;
//      } else {
//         return this.entity.get();
//      }
   }

   /**
    * used to ensure that we do not accidently attempt to populate this twice
    */
   private transient boolean populated = false;
   /**
    * FOR INTERNAL USE ONLY - do not use
    */
   public void setPopulated(boolean populated) {
      this.populated = populated;
   }
   /**
    * @return true if this object was populated, false otherwise
    */
   public boolean isPopulated() {
      return populated;
   }

   /**
    * Minimal constructor - used for most basic cases
    * Use the setters to add in properties or the entity if desired
    * 
    * @param reference a globally unique reference to an entity, 
    * consists of the entity prefix and id (e.g. /prefix/id)
    * @param displayTitle a string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    */
   public EntityData(String reference, String displayTitle) {
      this(reference, displayTitle, null, null);
   }

   /**
    * Basic constructor
    * Use this to construct a search result using the typical minimal amount of information,
    * Use the setters to add in properties or the entity if desired
    * 
    * @param reference a globally unique reference to an entity, 
    * consists of the entity prefix and id (e.g. /prefix/id)
    * @param displayTitle a string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    * @param entity an entity object, see {@link Resolvable}
    */
   public EntityData(String reference, String displayTitle, Object entity) {
      this(reference, displayTitle, entity, null);
   }

   /**
    * Full constructor
    * Use this if you want to return the entity itself along with the key meta data and properties
    * 
    * @param reference a globally unique reference to an entity, 
    * consists of the entity prefix and id (e.g. /prefix/id)
    * @param displayTitle a string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    * @param entity an entity object, see {@link Resolvable}
    * @param entityProperties a set of properties to return along with the entity information,
    * this may be presented and used for filtering,
    */
   public EntityData(String reference, String displayTitle, Object entity, Map<String, Object> entityProperties) {
      this.entityReference = new EntityReference(reference);
      this.reference = this.entityReference.getReference();
      this.displayTitle = displayTitle;
      this.URL = EntityView.DIRECT_PREFIX + this.reference;
      setEntity(entity);
      setEntityProperties(entityProperties);
   }

   
   /**
    * Minimal constructor - used for most basic cases
    * Use the setters to add in properties or the entity if desired
    * 
    * @param ref an object which represents a globally unique reference to an entity, 
    * consists of the entity prefix and id
    * @param displayTitle a string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    */
   public EntityData(EntityReference ref, String displayTitle) {
      this(ref, displayTitle, null, null);
   }

   /**
    * Basic constructor
    * Use this to construct a search result using the typical minimal amount of information,
    * Use the setters to add in properties or the entity if desired
    * 
    * @param ref an object which represents a globally unique reference to an entity, 
    * consists of the entity prefix and id
    * @param displayTitle a string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    * @param entity an entity object, see {@link Resolvable}
    */
   public EntityData(EntityReference ref, String displayTitle, Object entity) {
      this(ref, displayTitle, entity, null);
   }

   /**
    * Full constructor
    * Use this if you want to return the entity itself along with the key meta data and properties
    * 
    * @param ref an object which represents a globally unique reference to an entity, 
    * consists of the entity prefix and id
    * @param displayTitle a string which is suitable for display and provides a short summary of the entity,
    * typically 100 chars or less, this may the name or title of the data represented by an entity
    * @param entity an entity object, see {@link Resolvable}
    * @param entityProperties a set of properties to return along with the entity information,
    * this may be presented and used for filtering,
    */
   public EntityData(EntityReference ref, String displayTitle,
         Object entity, Map<String, Object> entityProperties) {
      if (ref == null || ref.isEmpty()) {
         throw new IllegalArgumentException("reference object cannot be null and must have values set");
      }
      this.entityReference = ref;
      this.reference = this.entityReference.getReference();
      this.displayTitle = displayTitle;
      this.URL = EntityView.DIRECT_PREFIX + this.reference;
      this.displayTitle = displayTitle;
      setEntity(entity);
      setEntityProperties(entityProperties);
   }

   @Override
   public boolean equals(Object obj) {
      if (null == obj)
         return false;
      if (!(obj instanceof EntityData))
         return false;
      else {
         EntityData castObj = (EntityData) obj;
         if (null == this.reference || null == castObj.reference)
            return false;
         else
            return (this.reference.equals(castObj.reference));
      }
   }

   @Override
   public int hashCode() {
      String hashStr = this.getClass().getName() + ":" + this.reference.hashCode();
      return hashStr.hashCode();
   }
   
   @Override
   public String toString() {
      return "ED: ref="+reference+":display="+displayTitle+":url="+URL+":props("+getEntityProperties().size()+"):entity="+entity;
   }

   public static class ESRReferenceComparator implements Comparator<EntityData> {
      public int compare(EntityData o1, EntityData o2) {
         return o1.reference.compareTo(o2.reference);
      }
   }

}
