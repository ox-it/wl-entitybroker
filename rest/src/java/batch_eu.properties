#X-Generator: crowdin.net
# Contains the i18n strings for the entity description pages
# the batch describe page
batch=Batch is a special handler which provides batch processing for multiple entity requests at once
batch.description=Batch uses the "_refs" parameter to define the handled urls/entity references (e.g. /direct/batch.json?_refs\=/direct/entity1/123,/direct/entity2/456). <br/>\nThe default format returned for batch requests is json, to request other formats simply include the extension after the \nbatch as shown. Batch cannot function without the refs parameter so excluding it causes a failure. <br/>\nThe handler requires full paths to refs but will insert the EB servlet path if the ref does not start with "/". \nExternal refs can be included by using the full URL (http\://...). <br/>\nThe status of the batch will be returned as 200 for all or partial success. Total failure or server error results in a 501. <br/>\nThe following headers will be returned for a request which does not result in a server failure\: <br/> \n- batchRefs (all the refs which we processed in this batch - e.g. /direct/prefix/id) <br/>\n- batchStatus (the status of each ref request - e.g. 200) <br/>\n- batchKeys (the keys used to represent each ref - e.g. ref0) <br/>\n- batchURLs (the URLs which the requests were sent to - e.g. /direct/prefix/id.json) <br/>\n- batchMapping (the mapping from ref key to ref - e.g. ref0\=/direct/entity1/123) <br/>\n- batchErrors (includes any ref keys for refs which had failures - e.g. ref1) <br/>\nSupports GET, POST, PUT, and DELETE Http methods.
batch.output=The data will be returned in the format requested for requests (e.g. json) \nwith the response data for each ref located under a ref\# structure (e.g. ref0 \= /direct/entity1/123, ref1 \= /direct/entity2/456). \nThe headers, status, ref, entityURL, and data (or raw content) will be returned for each ref. If the data from the ref \ncan be understood as the requested format it will be integrated into the response, if not, it will be included as raw content.
batch.input=Input is specially handled for batch requests. Input should be in the form of http params (in the header) with the batch key \nprefixed to every param that is unique for the related batch request and any shared params left without a prefix. <br/>\nFor example, we want to batch create 2 poll options and they share the same pollId. The params sent might like so\: \n(pollId\=111, ref0.text\='Ice cream and kittens', ref1.text\='I hate nice things') The pollId will be applied to both \npoll options being created. <br/>Sending encoded data in the request body is not currently supported.
